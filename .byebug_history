c
photo.sub(old_vehicle_root_path, new_vehicle_root_s3_path)
c
exit
a2
a2 = photo.sub(new_vehicle_root_s3_path, old_vehicle_root_path)
photo.sub(old_vehicle_root_path, new_vehicle_root_s3_path)
s3_adapter.delete_file(photo.sub(new_vehicle_root_s3_path, old_vehicle_root_path))
s3_adapter.delete_file(photo.sub(new_vehicle_root_path, old_vehicle_root_s3_path))
s3_adapter.delete_file(photo.sub(old_vehicle_root_path, new_vehicle_root_s3_path))
a1
a1 = photo.sub(old_vehicle_root_path, new_vehicle_root_s3_path)
new_vehicle_root_s3_path
old_vehicle_root_path
photo.sub(old_vehicle_root_path, new_vehicle_root_s3_path)
c
new_vehicle_root_s3_path
old_vehicle_root_path
c
children_key_mappings
exit
children_key_mappings
c
exit
params[:registration_id] #!= record.registration_id
params[:registration_id] != record.registration_id
c
exit
c
exit
photo
s3_adapter.delete_file(photo)
photo
c
deleted_photos.present?
exit
upload_photos(photos) if photos.present?
deleted_photos.present?
c
destination_object.copy_from(source_object)
children_key_mappings.each { |source_key, destination_key|
        source_child_object = @bucket.object(source_key)
        destination_child_object = @bucket.object(destination_key)
        destination_child_object.copy_from(copy_source: "#{@bucket.name}/#{source_key}")
      }
children_key_mappings
new_children_keys
c
#list_files(old_folder).each { |file| file.sub(old_folder, new_folder) }
list_files(old_folder).each { |file| p file.sub(old_folder, new_folder) }
list_files(old_folder).each { |file| file.sub(old_folder, new_folder) }
list_files(old_folder)
list_files(new_folder)
folder_exists?(new_folder)
folder_exists?(old_folder)
source_object.list_files?
source_object.list_files
destination_object
desitnation_object
source_object
c
source_object
destination_object
c
destination_object.copy_from(copy_source: t1)
t1 = "#{@bucket.name}/#{new_folder}"
"#{@bucket.name}/#{new_folder}"
destination_object.copy_from(copy_source: source_object)
#destination_object.
destination_object.client.keys
destination_object.client
destination_object
destination_object.copy_from(source_object)
old_folder
new_folder
c
destination_object.copy_from(source_object)
destination_object = @bucket.object(new_folder)
create_folder_if_not_created(new_folder)
create_folder_if_not_created(destination_folder)
destination_object = @bucket.object(new_folder)
source_object = @bucket.object(old_folder)
bucket.client.methods - Object.methods
bucket.client
bucket
c
exit
c
exit
new_folder
old_folder
#source_object = @bucket.object(source_key)
    #destination_object = @bucket.object(destination_key)
    #destination_object.copy_from(source_object)
destination_object = @bucket.object(new_folder)
source_object = @bucket.object(old_folder)
#source_object = @bucket.object(source_key)
    #destination_object = @bucket.object(destination_key)
    #destination_object.copy_from(source_object)
s3.copy_object
s3
c
params
exit
params
exit
params
exit
params
exit
params
exit
params
a = params.require(:vehicle_details).permit(:id, :registration_id, :chassis_id, :engine_id, :manufacturing_year, :cost_price, :loan_or_agreement_number, :stock_entry_date, :comments, :location, :vehicle_model_id, :city, :state, :pincode, :comments, photos: [], deleted_photos: []).to_h.deep_symbolize_keys
exit
params
c
exit
record
update(params)
params.delete(:deleted_photos)
photos = params.delete(:photos)
exit
a[:deleted_photos]
a = params.require(:vehicle_details).permit(:id, :registration_id, :chassis_id, :engine_id, :manufacturing_year, :cost_price, :loan_or_agreement_number, :stock_entry_date, :comments, :location, :vehicle_model_id, :city, :state, :pincode, :comments, photos: [], deleted_photos: []).to_h.deep_symbolize_keys
params.require(:vehicle_details).permit(:id, :registration_id, :chassis_id, :engine_id, :manufacturing_year, :cost_price, :loan_or_agreement_number, :stock_entry_date, :comments, :location, :vehicle_model_id, :city, :state, :pincode, :comments, photos: [], deleted_photos: []).to_h.deep_symbolize_keys
c
files = s3_adapter.list_files("#{vehicle_photos_path}/")
files = s3_adapter.list_files("#{vehicle_photos_path}/**")
files = s3_adapter.list_files("#{vehicle_photos_path}/*")
{ files: files.map { |file| {filename: file, publi_url: s3_adapter.public_url(file)} } }
files = s3_adapter.list_files("#{vehicle_photos_path}/")
"#{vehicle_photos_path}/"
vehicle_photos_path
files
c
exit
photos
c
exit
bucket.object("#{folder_name}/").put
obj.put
folder_name
c
@bucket = s3.bucket(bucket_name)
c
Aws.config.update({
  region: 'us-east-1', # replace with your preferred region
  # credentials: Aws::Credentials.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY'])
  credentials: Aws::Credentials.new("AKIA26WHCW34DVI3NLNV", "GDVR0f6MRRLDbY4WsPpaC7iox6I2k1a7/z3DZ6Y4")
})
Aws.config
c
params[:photos]
#photos = params.delete(:photos)
c
record.persisted?
c
a[:photos]
a = params.require(:vehicle_details).permit(:id, :registration_id, :chassis_id, :engine_id, :manufacturing_year, :cost_price, :loan_or_agreement_number, :stock_entry_date, :comments, :location, :vehicle_model_id, :city, :state, :pincode, :comments, photos: []).to_h.deep_symbolize_keys
params["vehicle_details"]["photos"].first
params["vehicle_details"]["photos"]
exit
params["vehicle_details"]["photos"]
params["vehicle_details"]["photos"].length
exit
params["vehicle_details"]["photos"].length
params["vehicle_details"]["photos"]
params["vehicle_details"]
a
a = params.require(:vehicle_details).permit(:id, :registration_id, :chassis_id, :engine_id, :manufacturing_year, :cost_price, :loan_or_agreement_number, :stock_entry_date, :comments, :location, :vehicle_model_id, :city, :state, :pincode, :comments, photos: []).to_h.deep_symbolize_keys
c
file['id']
c
files
exit
files
c
files_list
file
c
response.body
file
response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(request) }
c
uri
c
uri
c
exit
body
c
file_content = params[:content]
file_content
body
c
file_content
c
response = http.request(request)
request
c
file_metadata = {
        name: file.original_filename,
        mimeType: file.content_type,
      }
file.original_filename
c
exit
file_metadata[:parents] = [parent_folder_id] if parent_folder_id.present?
file_metadata = {
        name: file.original_filename,
      }
file
c
exit
photos
c
params[:photos].length
params[:photos]
c
exit
params[:photo]
params[:photos]
params
c
exit
photos
c
params
c
exit
params
c
exit
photos
c
exit
company_name_folder_id = find_or_create_if_no_folder(google_drive_adapter, company_name, agency_folder_id)
agency_folder_id = find_folder_id(google_drive_adapter, agency_folder_name, dealdrive_folder_id)
c
exit
c
exit
params
c
vehicle_params[:state]
exit
vehicle_params
c
response = hit_route("Post", url, params)
c
response = hit_route("Post", url, params)
c
google_drive_adapter.create_folder("Agency_#{record.name}_#{record.id}", application_root_folder_id)
application_root_folder_id = google_drive_adapter.get_dealdrive_folder_info
c
